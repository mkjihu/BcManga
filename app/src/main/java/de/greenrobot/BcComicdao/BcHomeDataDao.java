package de.greenrobot.BcComicdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BC_HOME_DATA".
*/
public class BcHomeDataDao extends AbstractDao<BcHomeData, Long> {

    public static final String TABLENAME = "BC_HOME_DATA";

    /**
     * Properties of entity BcHomeData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HomePK = new Property(1, String.class, "HomePK", false, "HOME_PK");
        public final static Property HomeUrl = new Property(2, String.class, "HomeUrl", false, "HOME_URL");
        public final static Property HomePageItemArrayGSON = new Property(3, String.class, "HomePageItemArrayGSON", false, "HOME_PAGE_ITEM_ARRAY_GSON");
        public final static Property HomeItemArrayGSON = new Property(4, String.class, "HomeItemArrayGSON", false, "HOME_ITEM_ARRAY_GSON");
        public final static Property LastUpdated = new Property(5, java.util.Date.class, "LastUpdated", false, "LAST_UPDATED");
    }


    public BcHomeDataDao(DaoConfig config) {
        super(config);
    }
    
    public BcHomeDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BC_HOME_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HOME_PK\" TEXT NOT NULL UNIQUE ," + // 1: HomePK
                "\"HOME_URL\" TEXT NOT NULL UNIQUE ," + // 2: HomeUrl
                "\"HOME_PAGE_ITEM_ARRAY_GSON\" TEXT," + // 3: HomePageItemArrayGSON
                "\"HOME_ITEM_ARRAY_GSON\" TEXT," + // 4: HomeItemArrayGSON
                "\"LAST_UPDATED\" INTEGER);"); // 5: LastUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BC_HOME_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BcHomeData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getHomePK());
        stmt.bindString(3, entity.getHomeUrl());
 
        String HomePageItemArrayGSON = entity.getHomePageItemArrayGSON();
        if (HomePageItemArrayGSON != null) {
            stmt.bindString(4, HomePageItemArrayGSON);
        }
 
        String HomeItemArrayGSON = entity.getHomeItemArrayGSON();
        if (HomeItemArrayGSON != null) {
            stmt.bindString(5, HomeItemArrayGSON);
        }
 
        java.util.Date LastUpdated = entity.getLastUpdated();
        if (LastUpdated != null) {
            stmt.bindLong(6, LastUpdated.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BcHomeData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getHomePK());
        stmt.bindString(3, entity.getHomeUrl());
 
        String HomePageItemArrayGSON = entity.getHomePageItemArrayGSON();
        if (HomePageItemArrayGSON != null) {
            stmt.bindString(4, HomePageItemArrayGSON);
        }
 
        String HomeItemArrayGSON = entity.getHomeItemArrayGSON();
        if (HomeItemArrayGSON != null) {
            stmt.bindString(5, HomeItemArrayGSON);
        }
 
        java.util.Date LastUpdated = entity.getLastUpdated();
        if (LastUpdated != null) {
            stmt.bindLong(6, LastUpdated.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BcHomeData readEntity(Cursor cursor, int offset) {
        BcHomeData entity = new BcHomeData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // HomePK
            cursor.getString(offset + 2), // HomeUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // HomePageItemArrayGSON
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // HomeItemArrayGSON
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // LastUpdated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BcHomeData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHomePK(cursor.getString(offset + 1));
        entity.setHomeUrl(cursor.getString(offset + 2));
        entity.setHomePageItemArrayGSON(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHomeItemArrayGSON(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastUpdated(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BcHomeData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BcHomeData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BcHomeData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
