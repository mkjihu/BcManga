package de.greenrobot.BcComicdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BC_INDEX_DATA".
*/
public class BcIndexDataDao extends AbstractDao<BcIndexData, Long> {

    public static final String TABLENAME = "BC_INDEX_DATA";

    /**
     * Properties of entity BcIndexData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PKUrl = new Property(1, String.class, "PKUrl", false, "PKURL");
        public final static Property HomePK = new Property(2, String.class, "HomePK", false, "HOME_PK");
        public final static Property ImageUrl = new Property(3, String.class, "ImageUrl", false, "IMAGE_URL");
        public final static Property TitleName = new Property(4, String.class, "TitleName", false, "TITLE_NAME");
        public final static Property AuthorName = new Property(5, String.class, "AuthorName", false, "AUTHOR_NAME");
        public final static Property Updated_day = new Property(6, String.class, "Updated_day", false, "UPDATED_DAY");
        public final static Property Type = new Property(7, String.class, "Type", false, "TYPE");
        public final static Property Gist = new Property(8, String.class, "Gist", false, "GIST");
        public final static Property IsCollect = new Property(9, Boolean.class, "isCollect", false, "IS_COLLECT");
        public final static Property ItemArrayGSON = new Property(10, String.class, "ItemArrayGSON", false, "ITEM_ARRAY_GSON");
        public final static Property ClickDate = new Property(11, java.util.Date.class, "ClickDate", false, "CLICK_DATE");
        public final static Property FocusItem = new Property(12, Integer.class, "FocusItem", false, "FOCUS_ITEM");
        public final static Property ComicDownloadPath = new Property(13, String.class, "ComicDownloadPath", false, "COMIC_DOWNLOAD_PATH");
        public final static Property IsDownload = new Property(14, Boolean.class, "isDownload", false, "IS_DOWNLOAD");
    }


    public BcIndexDataDao(DaoConfig config) {
        super(config);
    }
    
    public BcIndexDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BC_INDEX_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PKURL\" TEXT NOT NULL UNIQUE ," + // 1: PKUrl
                "\"HOME_PK\" TEXT NOT NULL ," + // 2: HomePK
                "\"IMAGE_URL\" TEXT," + // 3: ImageUrl
                "\"TITLE_NAME\" TEXT NOT NULL ," + // 4: TitleName
                "\"AUTHOR_NAME\" TEXT," + // 5: AuthorName
                "\"UPDATED_DAY\" TEXT," + // 6: Updated_day
                "\"TYPE\" TEXT," + // 7: Type
                "\"GIST\" TEXT," + // 8: Gist
                "\"IS_COLLECT\" INTEGER," + // 9: isCollect
                "\"ITEM_ARRAY_GSON\" TEXT," + // 10: ItemArrayGSON
                "\"CLICK_DATE\" INTEGER," + // 11: ClickDate
                "\"FOCUS_ITEM\" INTEGER," + // 12: FocusItem
                "\"COMIC_DOWNLOAD_PATH\" TEXT," + // 13: ComicDownloadPath
                "\"IS_DOWNLOAD\" INTEGER);"); // 14: isDownload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BC_INDEX_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BcIndexData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPKUrl());
        stmt.bindString(3, entity.getHomePK());
 
        String ImageUrl = entity.getImageUrl();
        if (ImageUrl != null) {
            stmt.bindString(4, ImageUrl);
        }
        stmt.bindString(5, entity.getTitleName());
 
        String AuthorName = entity.getAuthorName();
        if (AuthorName != null) {
            stmt.bindString(6, AuthorName);
        }
 
        String Updated_day = entity.getUpdated_day();
        if (Updated_day != null) {
            stmt.bindString(7, Updated_day);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(8, Type);
        }
 
        String Gist = entity.getGist();
        if (Gist != null) {
            stmt.bindString(9, Gist);
        }
 
        Boolean isCollect = entity.getIsCollect();
        if (isCollect != null) {
            stmt.bindLong(10, isCollect ? 1L: 0L);
        }
 
        String ItemArrayGSON = entity.getItemArrayGSON();
        if (ItemArrayGSON != null) {
            stmt.bindString(11, ItemArrayGSON);
        }
 
        java.util.Date ClickDate = entity.getClickDate();
        if (ClickDate != null) {
            stmt.bindLong(12, ClickDate.getTime());
        }
 
        Integer FocusItem = entity.getFocusItem();
        if (FocusItem != null) {
            stmt.bindLong(13, FocusItem);
        }
 
        String ComicDownloadPath = entity.getComicDownloadPath();
        if (ComicDownloadPath != null) {
            stmt.bindString(14, ComicDownloadPath);
        }
 
        Boolean isDownload = entity.getIsDownload();
        if (isDownload != null) {
            stmt.bindLong(15, isDownload ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BcIndexData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPKUrl());
        stmt.bindString(3, entity.getHomePK());
 
        String ImageUrl = entity.getImageUrl();
        if (ImageUrl != null) {
            stmt.bindString(4, ImageUrl);
        }
        stmt.bindString(5, entity.getTitleName());
 
        String AuthorName = entity.getAuthorName();
        if (AuthorName != null) {
            stmt.bindString(6, AuthorName);
        }
 
        String Updated_day = entity.getUpdated_day();
        if (Updated_day != null) {
            stmt.bindString(7, Updated_day);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(8, Type);
        }
 
        String Gist = entity.getGist();
        if (Gist != null) {
            stmt.bindString(9, Gist);
        }
 
        Boolean isCollect = entity.getIsCollect();
        if (isCollect != null) {
            stmt.bindLong(10, isCollect ? 1L: 0L);
        }
 
        String ItemArrayGSON = entity.getItemArrayGSON();
        if (ItemArrayGSON != null) {
            stmt.bindString(11, ItemArrayGSON);
        }
 
        java.util.Date ClickDate = entity.getClickDate();
        if (ClickDate != null) {
            stmt.bindLong(12, ClickDate.getTime());
        }
 
        Integer FocusItem = entity.getFocusItem();
        if (FocusItem != null) {
            stmt.bindLong(13, FocusItem);
        }
 
        String ComicDownloadPath = entity.getComicDownloadPath();
        if (ComicDownloadPath != null) {
            stmt.bindString(14, ComicDownloadPath);
        }
 
        Boolean isDownload = entity.getIsDownload();
        if (isDownload != null) {
            stmt.bindLong(15, isDownload ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BcIndexData readEntity(Cursor cursor, int offset) {
        BcIndexData entity = new BcIndexData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // PKUrl
            cursor.getString(offset + 2), // HomePK
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ImageUrl
            cursor.getString(offset + 4), // TitleName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AuthorName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Updated_day
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Gist
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isCollect
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ItemArrayGSON
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // ClickDate
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // FocusItem
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ComicDownloadPath
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0 // isDownload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BcIndexData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPKUrl(cursor.getString(offset + 1));
        entity.setHomePK(cursor.getString(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitleName(cursor.getString(offset + 4));
        entity.setAuthorName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdated_day(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGist(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsCollect(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setItemArrayGSON(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClickDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setFocusItem(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setComicDownloadPath(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsDownload(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BcIndexData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BcIndexData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BcIndexData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
